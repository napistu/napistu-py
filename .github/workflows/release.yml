name: Release

on:
  workflow_run:
    workflows: ["Version Release"]  # Automated: triggers after version-release.yml
    types: [completed]
    branches: [main]
  workflow_dispatch:  # Manual: trigger from GitHub UI
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-west1
  REGISTRY: us-west1-docker.pkg.dev
  REPOSITORY: napistu-images

jobs:
  # Quick test before releasing
  test:
    name: Pre-release Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install and test
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -e ".[dev,mcp]"
        pytest -x -v  # Stop on first failure for speed

  # Build and publish to PyPI
  pypi:
    name: Publish to PyPI
    needs: test
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Build package
      run: |
        python -m pip install --upgrade pip build
        python -m build
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  # Build and push Docker images
  docker:
    name: Build Docker Images
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ inputs.version }}"
        elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          # Get the latest tag created by version-release workflow
          git fetch --tags
          VERSION=$(git tag -l "v*" | sort -V | tail -n1 | sed 's/^v//')
        else
          # Push event with tag
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Detected version: ${VERSION}"

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGISTRY }}

    - name: Build and push base image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.base
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/napistu-base:latest
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/napistu-base:${{ steps.version.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push MCP server image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.mcp
        build-args: |
          BASE_IMAGE=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/napistu-base:${{ steps.version.outputs.version }}
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/napistu-mcp-server:latest
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/napistu-mcp-server:${{ steps.version.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Create GitHub release
  github-release:
    name: Create GitHub Release
    needs: [pypi, docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - uses: actions/checkout@v4
        
    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ inputs.version }}"
        elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          # Get the latest tag created by version-release workflow
          git fetch --tags
          VERSION=$(git tag -l "v*" | sort -V | tail -n1 | sed 's/^v//')
        else
          # Push event with tag
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Detected version: ${VERSION}"
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ## Installation
          ```bash
          pip install napistu==${{ steps.version.outputs.version }}
          ```
          
          ## Docker Images
          ```bash
          # Base image
          docker pull ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/napistu-base:${{ steps.version.outputs.version }}
          
          # MCP Server
          docker pull ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/napistu-mcp-server:${{ steps.version.outputs.version }}
          docker run -p 8080:8080 ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/napistu-mcp-server:${{ steps.version.outputs.version }}
          ```
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        generate_release_notes: true